#!/usr/bin/env bash
#################################################################
# Author : Abner Benedito
# Version: 1.0
# License: 0-BSD
#################################################################

# shellcheck disable=SC1090,SC2155

#################################################################
# Configs
#################################################################

declare -- __SETUP_PWD__="$PWD"
declare -- __SETUP_FILE__="${__SETUP_PWD__}/setup.cfg"

#################################################################
# bashpackager
#################################################################

function __getConfigValues() {
    local line type parameter
    declare -g __SCRIPT_NAME__ __SCRIPT_VERSION__ __SCRIPT_DESC__

    while read -r line; do
        [[ "${line}" = "#"* ]] && continue

        type="${line%%:*}"
        : "${line##*:}"
        parameter="${_%%;*}"

        case "$type" in
            'name') __SCRIPT_NAME__="$parameter" ;;
            'version') __SCRIPT_VERSION__="$parameter" ;;
            'desc') __SCRIPT_DESC__="$parameter" ;;
            'source') __SCRIPT_SOURCE__="$parameter" ;;
            *) echo "$line" ;;
        esac
    done < "$__SETUP_FILE__"
}

__getConfigValues
echo $__SETUP_FILE__
echo $__SCRIPT_NAME__
echo $__SCRIPT_VERSION__
echo $__SCRIPT_DESC__
echo $__SCRIPT_SOURCE__
echo ${BASH_SOURCE[@]}

# function __msg() { printf '%b\n' "$*" >&2; }

# function __error() {
# 	local message="$*"

# 	__msg "\e[1;31mfatal error\e[m: $message"
# 	exit "$ERROR"
# }

# function __display_usage() {
# 	local text

# 	read -rd '' text <<'EOF'
# $0: usage: $0 [SCRIPT]
# EOF
# 	__msg "$text"

# 	exit "$TRUE"
# }

# function import() {
	
# }



# function import
# {
# 	# import a script based on BASHPACKAGERPATH
# 	local module="$1"
# 	local old_ifs="$IFS"
# 	local path _path
# 	local path_count import_error_count

# 	declare -i import_error_count=0
# 	declare -a path

# 	IFS=':' read -ra path <<< "$BASHPACKAGERPATH"
# 	IFS="$old_ifs"

# 	declare -i path_count="${#path[@]}"

# 	for _path in "${path[@]}"
# 	{
# 		[[ -d "$_path/$module" ]] ||
# 		{
# 			import_error_count+=1
# 			continue
# 		}

# 		[[ -e "$_path/$module/bp_main" ]] ||
# 		{
# 			__error "-- $SCRIPTNAME: \"bp_main\" not found in module \"$module\"."
# 		}

# 		source "$_path/$module/bp_main" && break
# 	}

# 	((import_error_count == path_count)) &&
# 		__error "-- $SCRIPTNAME: module \"$module\" not found."
# }

# (($# == 0)) && __display_usage

# if [[ -f "$1" ]]; then
# 	declare SCRIPTNAME="$1"
# 	source "$1"
# else
# 	__error "$1 not exists."
# fi
