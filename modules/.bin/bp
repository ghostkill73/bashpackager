#!/usr/bin/env bash
#################################################################
# Bashpackager
#################################################################

# Checking current bash version
case "$BASH_VERSION" in
	[4-9].*) : ;; # pass
	*)
		printf 'ERROR: Bash version >=4.0 required, but you have %s\n' "$BASH_VERSION"
		exit 1
		;;
esac

#################################################################
# Loading bp modules at modules/_bashpackager
#################################################################

function __Bashpackager.check() {
	local path="$PWD/modules"
	declare -gr __bp__modules__path__="$path/_bashpackager"

	if [[ -d "$path" ]]; then
		[[ -d "$__bp__modules__path__" ]] || {
			printf '%s\n' "$0: ERROR: $__bp__modules__path__ not found."
			exit 1
		}
	else
		printf '%s\n' "$0: ERROR: Directory 'module' not found. "
		printf '%s\n' "Please make sure you are running the bp from the root of the project."
		exit 1
	fi

}

function __Bashpackager.source() {
	if [[ -f "$1" ]]; then
		source "$1"
		return 0
	else
		printf '%s\n' "$0: ERROR: module $1 not found."
		exit 1
	fi
}

function __Bashpackager.main() {
	__Bashpackager.check

	__Bashpackager.source "$__bp__modules__path__/utils.sh"
	__Bashpackager.source "$__bp__modules__path__/config.sh"
	__Bashpackager.source "$__bp__modules__path__/load.sh"

	__LoadBashpackager
}

__Bashpackager.main
